<link type="text/css" rel="stylesheet" href="/assets/styles/lessons.css"/>
<script src="{{ base_url }}assets/js/jquery351.js"></script>
<script type="text/x-template" id="lessons-template">
    <div class="w-100" id="lessons">
        <div class="component order w-100">
            <div class="header">
                <div class="round">
                    <div>
                        <img src="/images/lamp.svg" alt="lamp">
                    </div>
                </div>
                <div class="title" v-html="`Запись на занятие к ${trainer.nickname}`">
                    Запись на занятие к Cooper2h
                </div>
            </div>
            <div class="table">
                <div class="lessons">
                    <div class="container" style="min-height: 40vw">
                        <div class="header lesson">
                            <div class="lft">
                                <div v-html="`Часовой пояс ${trainer.timeZone}`">
                                </div>
                            </div>
                            {% if app.user is not null %}
                                <div class="rgt" v-if="view === 1">
                                    <div class="price">
                                        Итого: <span v-text="getPrice()"></span> ₽
                                    </div>
                                    <div @click="setPay" class="button" :class="[items.length > 0 ? '' : 'blocked']">
                                        Далее
                                    </div>
                                </div>
                            {% endif %}
                        </div>
                        <div>
                            <timetables :trainer="trainer" v-on:setprice="setPrice" v-on:setitem="setItem" :block="block"/>
                        </div>
                        <div v-if="view === 2">
                            <payments v-on:setview="setView"/>
                        </div>
                        <div v-if="view === 3">
                            <order :items="items"/>
                        </div>
                    </div>
                </div>
            </div>
        </div>
</script>
{% if app.user.id is not defined %}
    {% set user_id = 0 %}
{% else %}
    {% set  user_id = app.user.id %}
{% endif %}

<script>
    Vue.component('trainer-lessons', {
        template: '#lessons-template',
        data: function () {
            return {
                block: false,
                view: 1,
                items: [],
            }
        },
        props: ['trainer'],
        methods: {
            getPrice() {
                let cost = 0;

                this.items.map(i => {
                    cost += this.trainer.trainer.cost
                })
                return cost;
            },
            setPay() {
                if (!this.block && this.items !== null) {
                    if (this.trainer.trainer.isLessonCost) {
                        if (!this.checkIsThreeLessonsInARow()){
                            return this.showLessonsChoseInvalidPopup();
                        }
                    }
                    return
                    this.block = true;
                    const data = {
                        lessons: this.items,
                        trainer_id: this.trainer.id,
                    }
                    axios.post(`/ru/lessons/create/`, data)
                        .then(({data}) => {
                            this.block = false;
                            if (data.ids) {
                                window.location.assign('/ru/payment/pay/lesson?lessonIds=' + JSON.stringify(data.ids))
                            } else {
                                alert('На данное время урок забронирован')
                            }
                        })
                        .catch(() => {
                            this.block = false;
                        })
                }
            },
            setPrice(val) {
                this.price = val;
            },
            setView(val) {
                this.view = val;
            },
            checkIsThreeLessonsInARow() {
                let lessonDates = {};
                for(let lesson of this.items) {
                    if (lessonDates[lesson.date] === undefined){
                        lessonDates[lesson.date] = [];
                    }
                    lessonDates[lesson.date].push(Number(lesson.time.split(':')[0]))
                }
                for (let date in lessonDates) {
                    lessonDates[date] = lessonDates[date].sort((a, b) => a - b)
                }
                for (let date in lessonDates) {
                    const result = lessonDates[date].reduce((p,c)=>{
                        if(p[p.length-1].length == 3){
                            p.push([]);
                        }
                        p[p.length-1].push(c);
                        return p;
                    }, [[]]);

                    for (let lesson of result) {
                        if (lesson.length < 3){
                            return false;
                        } else if(lesson[0] !== lesson[1] - 1 || lesson[1] !== lesson[2] - 1){
                            return false;
                        }
                    }
                }
                return true;
            },
            showLessonsChoseInvalidPopup(){
                Swal.fire({
                    icon: 'error',
                    title: 'Упс...',
                    html: 'У этого тренера указана цена за один урок (3 часа), необходимо выбрать 3 часа подряд для оформления заказа!',
                })
            },
            setItem(val) {
                if (val.date && val.time) {
                    let time = '';
                    val.date.times.forEach((i) => {
                        const hourin = i.timein.split(':');
                        if (hourin[0] === val.time) {
                            time = i;
                        }
                    })
                    const date = new Date(val.date.date);

                    const item = {
                        trainer_id: this.trainer.id,
                        user_id: {{ user_id }},
                        date: `${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`,
                        time: time.timein,
                        cost: this.trainer.trainer.cost,
                    };
                    if (val.add) {
                        this.items.push(item)
                    } else {
                        this.items = this.items.filter(i => {
                            return (i.date === item.date && i.time !== item.time) || i.date !== item.date;
                        })
                    }
                }
            },
        },
    });
</script>
<script src="{{ base_url }}assets/js/edit_data.js"></script>

