{% extends 'base.html.twig' %}
{% block title %}Тренеры{% endblock %}
{% block router %}marketplace{% endblock %}
{% block description %}
  <meta name="description" content="Тренеры по League of Legends, Dota или Cs:go">
{% endblock %}
{% block keywords %}
  <meta name="Keywords" content="Тренеры League of Legends, Тренеры Dota, Тренеры Cs:go">
{% endblock %}
{% block body %}
<h1 style="opacity: 0; position: absolute; left: 0; top: 0">
</h1>
<div class="trainers" id="trainers">
  {% include 'templates/trainers/slider.html.twig' %}
  <div class="container" v-if="trainers.length > 0">
    <div class="products">
      {% include 'templates/trainers/order.html.twig' %}
      {% include 'templates/trainers/reviews.html.twig' %}
    </div>
  </div>
</div>
<script>
  const trainers = new Vue({
    el: '#trainers',
    methods: {
      prevSlide() {
        this.slide = this.slide > -1 ? this.slide - 1 : this.slide;
        this.trainer = this.trainers[this.slide + 1];
        },
      nextSlide() {
        this.slide = this.slide < this.trainers.length ? this.slide + 1 : this.slide;
        this.trainer = this.trainers[this.slide + 1];
      },
      getLeftSlide() {
        if (window.innerWidth > 1000) {
          if (this.slide >= 0) {
            return '-' + this.slide * this.width + 'px';
          } else {
            return this.width + 'px';
          }
        } else {
          if (this.slide < 0) {
            return 0 + 'px';
          } else if (this.slide < 0) {
            return '-' + this.width + 'px';
          } else {
            return '-' + (this.slide + 1) * this.width + 'px';
          }
        }
      },
      getDateReview(val) {
        const parse = new Date(val);
        const today = new Date();
        let result = `${parse.getDate() < 10 ? '0' + parse.getDate() : parse.getDate()}.${(parse.getMonth() + 1) < 10 ? '0' + (parse.getMonth() + 1) : parse.getMonth() + 1}.${parse.getFullYear()}`;
        if (parse.getMonth() === today.getMonth()) {
          result = 'В этом месяце';
        }
        return result;
      },
      getRateReview(val) {
        if (this.trainer.rating[val]) {
          return this.trainer.rating[val];
        } else {
          return 0;
        }
        return rate;
      },
      getBarReview(val) {
        if (this.trainer.rating && this.trainer.reviewCount > 0) {
          const rate = this.getRateReview(val);
          return rate / this.trainer.reviewCount * 100 + '%';
        } else {
          return 0;
        }
      },
      sliderPrev(){
        if (this.slideControll && this.slideView > 0) {
          this.slideControll = false;
          this.slideView = this.slideView - 1;
          setTimeout(() => {
            this.slideControll = true;
          }, 500);
        }
      },
      sliderNext(){
        if (this.slideControll && this.slideView < this.slides.length - 1) {
          this.slideControll = false;
          this.slideView = this.slideView + 1;
          setTimeout(() => {
            this.slideControll = true;
          }, 500);
        }
      }
    },
    data: function () {
      return {
        slideControll: true,
        slideView: 0,
        slideWidth: 0,
        slideCounts: 3,
        slides: [{id: 1}, {id: 2}, {id: 3}],

        ww: 0,
        width: 0,
        slide: -1,
        trainers: [],
        paymentView: false,
        payment: 1,
        trainer: null,
        payments: [
          { id: 1, icon: 'ym.svg', name: 'Яндекс.Деньги' },
          { id: 2, icon: 'wm.svg', name: 'Webmoney' },
          { id: 3, icon: 'visa.svg', name: 'Visa' }
        ],
        reviews: [],
        pp: false,
        load: false,
        reviews: []
      };
    },
    mounted() {
      const th = this;
      axios.get('/ru/trainers/slider/{{game}}')
      .then((res) => {
        th.trainers = res.data;
        console.log(res.data)
        res.data.forEach((item, i) => {
          if (item.id === {{id}}) {
            th.slide = i - 1;
          }
        });
        th.trainer = this.trainers[this.slide + 1];
        if(window.innerWidth > 1000){
          th.width = (window.innerWidth / 2) - ((window.innerWidth / 2) / 5);
        }else{
          th.width = (window.innerWidth / 2) + ((window.innerWidth / 2) / 2);
        }
        th.ww = th.trainers.length * th.width;
      })
      .catch(() => {
        th.trainers = [];
      });
      if (document.getElementById('slide_clone')) {
        this.slideWidth = document.getElementById('slide_clone').clientWidth;
      }
    }
  });
</script>

{% endblock %}
